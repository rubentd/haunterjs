{"name":"haunterjs","tagline":"CSS regression testing tool focused on simplicity","body":"[![npm version](https://badge.fury.io/js/haunterjs.svg)](http://badge.fury.io/js/haunterjs) [![Build Status](https://travis-ci.org/rubentd/haunterjs.svg)](https://travis-ci.org/rubentd/haunterjs)\r\n\r\n## Table of Contents\r\n* [About haunterjs](#about-haunterjs)\r\n* [Taking snaps](#taking-snaps)\r\n* [Snap viewer](#snap-viewdeving-conflicts)\r\n* [API documentation](#api-documentation)\r\n* [Installation](#installation)\r\n\r\n\r\n## About haunterjs\r\nWhen you work on a big website or web application, you (and maybe a bunch of people) are constantly introducing changes in the visual components.  \r\nSometimes this changes are intentional, as you are improving the look and feel, or adding new features, but sometimes this changes are introduced by mistake.   \r\nImagine you are refactoring some component, for example a button, but you are not sure how this change is gonna impact the site. You would need to browse the whole site to make sure everything looks good.  \r\nWith css regression tests you can automate the process, and make sure none breaks the styles across the website.\r\n<br>\r\nThere are some tools like [PhantomCSS](https://github.com/huddle/phantomcss) \r\nor [wraith](https://github.com/BBC-News/wraith) \r\nwhich allow you to write tests to compare screenshots of your website and detect changes.\r\n  \r\n<br>\r\nhaunterjs was built on top of [PhantomCSS](https://github.com/huddle/phantomcss), \r\nadding some new features:\r\n\r\n1. Annotations for each screenshot\r\n2. Sense of ordered steps in the execution of the test\r\n3. More simplicity in the syntax for the tests\r\n4. A viewer to compare and choose the correct screenshots\r\n\r\n\r\nhaunterjs masks some complex features of casperjs, allowing to code simple tests, with a more compact and readable syntax.\r\n\r\nThis example test opens github.com and searches for 'bootstrap'\r\n\r\n```javascript\r\nvar haunter = require('../haunter.js');\r\nhaunter.start('search/bootstrap', 'Search for bootstrap repo');\r\nhaunter.goToUrl('https://github.com/');\r\nhaunter.snap('.header', 'Go to github.com');\r\nhaunter.sendKeys('input[type=text]', 'bootstrap');\r\nhaunter.snap('.header', 'Type bootstrap on the search field');\r\nhaunter.pressEnter('input[type=text]');\r\nhaunter.snap('.sort-bar', 'Press enter and view number of results');\r\nhaunter.end();\r\n```\r\n\r\n<br>\r\n## Taking snaps\r\n\r\nhaunterjs is based on the concept of **snaps**.\r\n\r\nA snap is a screenshot of a given css selector and an annotation for that screenshot, describing the current action being performed. \r\n\r\n```javascript\r\nhaunter.snap('.sort-bar', 'Press enter and view number of results');\r\n```\r\n\r\n<br>\r\n## Snap viewer\r\n\r\nhaunterjs includes a snap viewer written in nodejs and angularjs. You can use this tool as a navigation manual, browsing the snapshots of a specific user flow. You can compare them and choose the correct one, in the event of conflict.\r\n\r\n<br><br>\r\n![snap viewer](http://rubentd.com/haunterjs/img/viewer-index.png \"snap viewer\")\r\n<br><br>\r\n\r\nhaunterjs allows the test to be structured in a hierarchy or folder system, to facilitate the process of browsing/running the tests.\r\nFor example you can separate your tests by features or modules of your website.\r\n\r\nThis *virtual path* is setup in each test:\r\n\r\n```javascript\r\nhaunter.start('search/bootstrap', 'Search for bootstrap repo');\r\n```\r\n\r\n<br>\r\n## Solving conflicts\r\n\r\nWhen a conflict it's found, the viewer asks you which one is the correct version of that component.\r\n\r\n<br><br>\r\n![snap viewer](http://rubentd.com/haunterjs/img/conflict.gif \"snap viewer\")\r\n<br><br>\r\n\r\nSo you can update the baseline screenshot, or fix possible visual inconsistencies.\r\n\r\n<br><br>\r\n![snap viewer](http://rubentd.com/haunterjs/img/choose-correct.png \"snap viewer\")\r\n<br><br>\r\n\r\nAfter solving the conflicts, you must commit the changes in your repo.\r\n\r\n\r\n<br>\r\n## API Documentation\r\n\r\n**start()**  \r\nInitializes the test, saving a **hierarchy** or virtual path, and a **description** for the test.\r\n```javascript\r\nhaunter.start(hierarchy, description)\r\n```\r\n<br>\r\n\r\n**setViewport()**  \r\nSets up the width and height, to emulate different screen resolutions.\r\n```javascript\r\nhaunter.setViewport(width, height)\r\n```\r\n<br>\r\n\r\n**setUserAgent()**  \r\nSets up the user agent, to emulate different devices.\r\n```javascript\r\nhaunter.setUserAgent(ua)\r\n```\r\n<br>\r\n\r\n**goToUrl()**  \r\nGo to a given url. (If you don't use this method, the test will start in the default url defined in the config.js file)\r\n```javascript\r\nhaunter.goToUrl(url)\r\n```\r\n<br>\r\n\r\n**snap()**  \r\nSaves a **snap**. Which is a screenshot of the given selector, with an annotation.\r\n```javascript\r\nhaunter.snap(cssSelector, annotation)\r\n```\r\n<br>\r\n\r\n**snapExcluding()**  \r\nSaves a **snap**, excluding a given cssSelector from the picture.\r\n```javascript\r\nhaunter.snapExcluding(cssSelector, excludeSelector, annotation)\r\n```\r\n<br>\r\n\r\n**click()**  \r\nClicks the selected element, eg. a link or a button.\r\n```javascript\r\nhaunter.click(cssSelector)\r\n```\r\n<br>\r\n\r\n**sendKeys()**  \r\nSets up an string as input for a given element. Eg a test input element.\r\n```javascript\r\nhaunter.sendKeys(cssSelector, keys)\r\n```\r\n<br>\r\n\r\n**pressEnter()**  \r\nPress enter key in a given element.  Shortcut for:   sendKeys(cssSelector, casper.page.event.key.Enter , {keepFocus: true});\r\n```javascript\r\nhaunter.pressEnter(cssSelector)\r\n```\r\n<br>\r\n\r\n**exec()**  \r\nRun a command syncronously, for example to load some data before the test\r\n```javascript\r\nhaunter.exec(command, [args])\r\n```\r\n<br>\r\n\r\n**end()**  \r\nFinish the test and compare results.\r\n```javascript\r\nhaunter.end()\r\n```\r\n\r\n\r\n<br>\r\n## Installation\r\n\r\nhaunterjs is available as a node package\r\n\r\n```\r\nnpm install haunterjs\r\n```\r\n<br>\r\n\r\nStart by setting up your configuration on the *config.js* file. Or just leave all the values by default.\r\nMake sure the *viewerPort* configured in the config.js file matches the one in *www/js/app.js*\r\n\r\nRun the demo tests with:\r\n```\r\ncasperjs test demo-tests\r\n```\r\n\r\nRun the snap viewer with: \r\n```\r\nnode viewer.js\r\n```\r\nAnd then open http://localhost:[viewerPort] in your browser\r\n","google":"UA-62906708-1","note":"Don't delete this file! It's used internally to help with page regeneration."}